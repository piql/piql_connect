version: '3.4'

volumes:
  archivematica_pipeline_data:
    external:
      name: "am-pipeline-data"
  archivematica_storage_service_location_data:
    external:
      name: "ss-location-data"
  piqlConnect-mariadb:
    external: true

services:
  app:
    build:
      network: host
      context: ./
      dockerfile: ./app/Dockerfile
    volumes:
      - ".././:/var/www"
      - "archivematica_pipeline_data:/var/www/storage/am/am-pipeline-data:rw"
      - "archivematica_storage_service_location_data:/var/www/storage/am/ss-location-data:rw"
      - ./supervisor/:/etc/supervisor/
    links:
      - database
      - cache
    user: www-data:www-data
    environment:
      - "DB_PORT=3306"
      - "DB_HOST=database"
      - "REDIS_PORT=6379"
      - "REDIS_HOST=cache"
    networks:
      - piqlConnect-net

  nginx:
    image:  nginx
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../public:/var/www/public
      - ./../storage:/var/www/storage
      - ./../storage:/var/www/public/storage
      - ${NGINX_CONF:-./nginx/conf.d/}:/etc/nginx/conf.d/
      - ./nginx/ssl/:/etc/nginx/ssl/
    links:
      - app
    networks:
      - piqlConnect-net

  database:
    image: mariadb
    user: root
    environment:
      - "MYSQL_ROOT_PASSWORD=secret"
      - "MYSQL_DATABASE=connect"
      - "MYSQL_USER=connectdbuser"
      - "MYSQL_PASSWORD=AeJua4le"
    ports:
      - "3306:3306"
    volumes:
      - piqlConnect-mariadb:/var/lib/mysql
      - ./mysql/my.cnf:/etc/my.cnf
    networks:
      - piqlConnect-net

  cache:
    image: redis
    ports:
      - "63791:6379"
    networks:
      - piqlConnect-net

  echo:
    restart: unless-stopped
    build: ./echo
    links:
      - "cache:redis_message_server"
      - "nginx:app_authentication_server"
    working_dir: "/app"
    ports:
      - "6001:6001"
    volumes:
      - .././:/app
      - ./nginx/ssl/:/ssl/
    networks:
      - piqlConnect-net

  composer:
    user: ${HOST_USERID}:${HOST_GROUPID}
    image: composer
    command: bash -c "composer install && composer dump-autoload"
    stdin_open: true
    tty: true
    user: ${HOST_USERID}:${HOST_GROUPID}
    volumes:
      - .././:/app

  npm:
    build:
      network: host
      context: ./
      dockerfile: ./node/Dockerfile
    stdin_open: true
    tty: true
    user: ${HOST_USERID}:${HOST_GROUPID}
    volumes:
      - .././:/app
    environment:
      - "NPM_RUN=${NPM_RUN:-dev}"
  
  logstash:
    image: logstash:7.8.0
    command: /etc/logstash/init.sh
    volumes:
      - ./logstash/java/libs:/etc/logstash/libs
      - ./logstash/conf.d:/etc/logstash/conf.d
      - ./logstash/configs:/etc/logstash/config-templates
      - ./logstash/init.sh:/etc/logstash/init.sh:ro
    environment:
      MYSQL_NAME: ${DB_DATABASE}
      MYSQL_HOST: ${DB_HOST}
      MYSQL_PORT: ${DB_PORT}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASS: ${DB_PASSWORD}
      MONGO_NAME: ${MONGO_DB_DATABASE}
      MONGO_USER: ${MONGO_DB_USERNAME}
      MONGO_PASS: ${MONGO_DB_PASSWORD}
      MONGO_HOST: ${MONGO_DB_HOST}
      MONGO_PORT: ${MONGO_DB_PORT}

  mongodb:
    image: mongo:4.2.8
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_DB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_DB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB_DATABASE}
    volumes:
      - piqlConnect-mongodb:/data/db

networks:
  piqlConnect-net:
    driver: bridge

