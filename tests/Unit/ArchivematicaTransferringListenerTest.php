<?php

namespace Tests\Unit;

use App\Bag;
use App\Events\ApproveTransferToArchivematicaEvent;
use App\Events\ArchivematicaIngestingEvent;
use App\Events\ArchivematicaTransferringEvent;
use App\Events\ErrorEvent;
use App\Listeners\ApproveTransferToArchivematicaListener;
use App\Listeners\ArchivematicaClient;
use App\Listeners\ArchivematicaTransferringListener;
use Illuminate\Queue\CallQueuedClosure;
use Illuminate\Support\Facades\Bus;
use Illuminate\Support\Facades\Event;
use Mockery;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ArchivematicaTransferringListenerTest extends TestCase
{
    protected $bag;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->bag = Mockery::mock(Bag::class);
        $this->bag->shouldReceive('applyTransition')->once();
        $this->bag->shouldReceive('save')->once();
        $this->bag->shouldReceive('zipBagFileName')->once()->andReturn('test.zip');
        $this->bag->shouldReceive('getAttribute')->once()->andReturn("007");

    }

    public function test_transfer_copmplete() {
        // setup
        Event::fake();
        Bus::fake();

        $this->bag->shouldReceive('zipBagFileName')->once()->andReturn('test.zip');
        $this->bag->shouldReceive('getAttribute')->once()->andReturn("007");

        $amClient = \Mockery::mock(ArchivematicaClient::class);
        $amClient->shouldReceive('getTransferStatus')
            ->once()->andReturn(json_decode(
                '{"message":"OK", "results":[{"status": "COMPLETE", "name" : "test"}]}'
        ));

        $event = new ArchivematicaTransferringEvent($this->bag);
        $listener = new ArchivematicaTransferringListener($amClient);

        //test
        $listener->handle($event);

        // assets
        Bus::assertNotDispatched(CallQueuedClosure::class, function ($job) {
            return true;
        });

        Event::assertNotDispatched(ErrorEvent::class);
        Event::assertDispatched(ArchivematicaIngestingEvent::class);
    }

    public function transferFailureProvider() {
        $testSet = [];
        $testSet += ["FAILED" => ["FAILED"]];
        $testSet += ["USER_INPUT" => ["USER_INPUT"]];
        return $testSet;
    }
    /**
     * @dataProvider transferFailureProvider
     */
    public function test_transfer_failure($status) {
        // setup
        Event::fake();
        Bus::fake();

        $this->bag->shouldReceive('zipBagFileName')->once()->andReturn('test.zip');
        $this->bag->shouldReceive('getAttribute')->once()->andReturn("007");

        $amClient = \Mockery::mock(ArchivematicaClient::class);
        $amClient->shouldReceive('getTransferStatus')
            ->once()->andReturn(json_decode(
                '{"message":"OK", "results":[{"status": "'.$status.'", "name" : "test"}]}'
            ));

        $event = new ArchivematicaTransferringEvent($this->bag);
        $listener = new ArchivematicaTransferringListener($amClient);

        //test
        $listener->handle($event);

        // assets
        Bus::assertNotDispatched(CallQueuedClosure::class, function ($job) {
            return true;
        });

        Event::assertDispatched(ErrorEvent::class);
        Event::assertNotDispatched(ArchivematicaIngestingEvent::class);
    }

    public function test_transfer_no_status() {
        // setup
        Event::fake();
        Bus::fake();

        $amClient = \Mockery::mock(ArchivematicaClient::class);
        $amClient->shouldReceive('getTransferStatus')
            ->once()->andReturn(json_decode(
                '{"message":"OK", "results":[]}'
            ));

        $event = new ArchivematicaTransferringEvent($this->bag);
        $listener = new ArchivematicaTransferringListener($amClient);

        //test
        $listener->handle($event);

        // assets
        Bus::assertDispatched(CallQueuedClosure::class, function ($job) {
            return true;
        });

        Event::assertNotDispatched(ErrorEvent::class);
        Event::assertNotDispatched(ArchivematicaIngestingEvent::class);
    }

    public function test_am_client_error() {
        // setup
        Event::fake();
        Bus::fake();

        $amClient = \Mockery::mock(ArchivematicaClient::class);
        $amClient->shouldReceive('getTransferStatus')
            ->once()->andReturn(json_decode(
                '{"message":"OK", "results":[]}'
        ));
        $event = new ArchivematicaTransferringEvent($this->bag);
        $listener = new ArchivematicaTransferringListener($amClient);

        //test
        $listener->handle($event);

        // assets
        Bus::assertDispatched(CallQueuedClosure::class, function ($job) {
            return true;
        });

        Event::assertNotDispatched(ErrorEvent::class);
        Event::assertNotDispatched(ArchivematicaIngestingEvent::class);
    }


}
