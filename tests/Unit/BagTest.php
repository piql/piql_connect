<?php

namespace Tests\Unit;

use App\Bag;
use App\BagTransitionException;
use App\EventLogEntry;
use App\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Log;
use Laravel\Passport\Passport;
use Tests\TestCase;
use function Psy\debug;
class TestBag extends Bag {
    public function getSmConfig() {
        return $this->smConfig;
    }
}

class BagTest extends TestCase
{
    use DatabaseTransactions;

    private $bag;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->bag = new TestBag([
            'name' => 'Testbag',
            'owner' => 'owner',
        ]);
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @dataProvider validStateTransitionProvider
     */
    public function test_valid_state_transitions($from, $to, $transition) {
        $this->bag->status = $from;
        $this->bag->applyTransition($transition);
        $this->assertEquals($this->bag->status, $to);
    }

    public function validStateTransitionProvider() {

        $bag = new TestBag([
            'name' => 'Testbag',
            'owner' => 'owner',
        ]);
        $smConfig = $bag->getSmConfig();
        $states = $smConfig['states'];
        $transitions = $smConfig['transitions'];
        $testSet = [];
        foreach ($transitions as $key => $transition) {
            foreach ($states as $state) {
                if((array_search($state, $transition["from"]) !== false)) {
                    $testSet += [$key . "_from_state_" . $state => [$state, $transition['to'], $key]];
                }
            }
        }
        return $testSet;
    }

    /**
     * @dataProvider invalidStateTransitionProvider
     */
    public function test_invalid_state_transitions($from, $transition) {
        $this->bag->status = $from;
        $this->expectException(BagTransitionException::class);
        $this->bag->applyTransition($transition);
        $this->assertEquals($this->bag->status, $from);
    }

    public function invalidStateTransitionProvider() {
        $bag = new TestBag([
            'name' => 'Testbag',
            'owner' => 'owner',
        ]);
        $smConfig = $bag->getSmConfig();
        $states = $smConfig['states'];
        $transitions = $smConfig['transitions'];
        $testSet = [];
        foreach ($transitions as $key => $transition) {
            foreach ($states as $state) {
                if((array_search($state, $transition["from"]) === false)) {
                    $testSet += [$key . "_from_state_" . $state => [$state, $key]];
                }
            }
        }
        return $testSet;
    }

    public function test_get_event_log_entries()
    {
        $user = factory(User::class)->create();
        Passport::actingAs( $user );
        $bag = factory(Bag::class)->create([
            "status" => "initiate_transfer"
        ]);
        $eventEntry[] = new EventLogEntry([
            'severity' => "DEBUG",
            'type' => 'DUMMY_EVENT',
            'message' => 'This is a dummy test',
        ]);
        $eventEntry[0]->context()->associate($bag);
        $eventEntry[0]->save();

        $eventEntry[] = new EventLogEntry([
            'severity' => "ERROR",
            'type' => 'DUMMY_ERROR_EVENT',
            'message' => 'Holy crap something bad happened!',
        ]);
        $eventEntry[1]->context()->associate($bag);
        $eventEntry[1]->save();

        $bag->refresh();

        $this->assertEquals($eventEntry[0]->id, $bag->events[0]->id);
        $this->assertEquals($eventEntry[1]->id, $bag->events[1]->id);
    }


}
