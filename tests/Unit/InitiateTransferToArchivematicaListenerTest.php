<?php

namespace Tests\Unit;

use App\Bag;
use App\Events\ApproveTransferToArchivematicaEvent;
use App\Events\ArchivematicaIngestingEvent;
use App\Events\ErrorEvent;
use App\Events\IngestCompleteEvent;
use App\Events\InitiateTransferToArchivematicaEvent;
use App\Listeners\ArchivematicaClient;
use App\Listeners\ArchivematicaIngestingListener;
use App\Listeners\InitiateTransferToArchivematicaListener;
use Illuminate\Queue\CallQueuedClosure;
use Illuminate\Support\Facades\Bus;
use Illuminate\Support\Facades\Event;
use Mockery;
use Tests\TestCase;

class InitiateTransferToArchivematicaListenerTest extends TestCase
{
    protected $bag;
    protected $zipBagFileName;
    protected $zipBagId;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->zipBagFileName = 'test.zip';
        $this->zipBagId = '007';
        $this->bag = Mockery::mock(Bag::class);
        $this->bag->shouldReceive('applyTransition')->once();
        $this->bag->shouldReceive('save')->once();
        $this->bag->shouldReceive('zipBagFileName')->once()->andReturn($this->zipBagFileName);
        $this->bag->shouldReceive('getAttribute')->once()->with('id')->andReturn($this->zipBagId);

    }

    public function test_initiate_transfer_success() {

        // setup
        Event::fake();

        $this->bag->shouldReceive('getAttribute')->once()->with('id')->andReturn($this->zipBagId);

        $amClient = \Mockery::mock(ArchivematicaClient::class);
        $amClient->shouldReceive('initiateTransfer')->once();

        $event = new InitiateTransferToArchivematicaEvent($this->bag);
        $listener = new InitiateTransferToArchivematicaListener($amClient);

        //test
        $listener->handle($event);

        // assets
        Event::assertNotDispatched(ErrorEvent::class);
        Event::assertDispatched(ApproveTransferToArchivematicaEvent::class);
    }

    public function test_initiate_transfer_failure() {
        // setup
        Event::fake();

        $this->bag->shouldReceive('getAttribute')->once()->with('id')->andReturn($this->zipBagId);

        $amClient = \Mockery::mock(ArchivematicaClient::class);
        $amClient->shouldReceive('initiateTransfer')->once()->andThrow(\Exception::class);

        $event = new ArchivematicaIngestingEvent($this->bag);
        $listener = new InitiateTransferToArchivematicaListener($amClient);

        //test
        $listener->handle($event);

        // assets
        Event::assertDispatched(ErrorEvent::class);
        Event::assertNotDispatched(ApproveTransferToArchivematicaEvent::class);
    }

}
