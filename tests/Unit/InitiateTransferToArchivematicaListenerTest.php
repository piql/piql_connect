<?php

namespace Tests\Unit;

use App\Bag;
use App\Events\ApproveTransferToArchivematicaEvent;
use App\Events\ArchivematicaIngestingEvent;
use App\Events\ArchivematicaInitiateTransferError;
use App\Events\ConnectionError;
use App\Events\ErrorEvent;
use App\Events\InitiateTransferToArchivematicaEvent;
use App\File;
use App\Listeners\InitiateTransferToArchivematicaListener;
use App\Interfaces\ArchivematicaDashboardClientInterface;
use App\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Event;
use Mockery;
use Tests\TestCase;
use Laravel\Passport\Passport;

class InitiateTransferToArchivematicaListenerTest extends TestCase
{
    use DatabaseTransactions;

    protected $bag;
    protected $zipBagFileName;
    protected $zipBagId;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = factory(User::class)->create();
        Passport::actingAs( $user );
        $bag = factory(Bag::class)->create([
            "status" => "move_to_outbox"
        ]);

        $this->files = factory(File::class, 1)->create()->each(function($file) use ($bag) {
            $file->bag_id = $bag->id;
            $file->save();
        });

        $this->bag = $bag->fresh();
    }

    public function test_initiate_transfer_success() {

        // setup
        Event::fake();

        $amClient = Mockery::mock(ArchivematicaDashboardClientInterface::class);
        $amClient->shouldReceive('initiateTransfer')->once()->andReturns(
            (object)[
                'contents' => json_decode('{}'),
                'statusCode' => 200,
            ]
        );

        $event = new InitiateTransferToArchivematicaEvent($this->bag);
        $listener = new InitiateTransferToArchivematicaListener($amClient);

        //test
        $listener->handle($event);

        // assets
        Event::assertNotDispatched(ArchivematicaInitiateTransferError::class);
        Event::assertNotDispatched(ConnectionError::class);
        Event::assertNotDispatched(ErrorEvent::class);
        Event::assertDispatched(ApproveTransferToArchivematicaEvent::class);
    }

    public function test_where_initiate_transfer_where_archivematica_returns_with_error_message() {
        // setup
        Event::fake();

        $amClient = Mockery::mock(ArchivematicaDashboardClientInterface::class);
        $amClient->shouldReceive('initiateTransfer')->once()->andReturns(
            (object)[
                'contents' => json_decode('{"message" : "Error", "error" : "true" }'),
                'statusCode' => 400,
            ]
        );

        $event = new ArchivematicaIngestingEvent($this->bag);
        $listener = new InitiateTransferToArchivematicaListener($amClient);

        //test
        $listener->handle($event);

        // assets
        Event::assertDispatched(ArchivematicaInitiateTransferError::class);
        Event::assertNotDispatched(ConnectionError::class);
        Event::assertDispatched(ErrorEvent::class);
        Event::assertNotDispatched(ApproveTransferToArchivematicaEvent::class);
    }


    public function test_where_initiate_transfer_where_archivematica_returns_without_error_message() {
        // setup
        Event::fake();

        $amClient = Mockery::mock(ArchivematicaDashboardClientInterface::class);
        $amClient->shouldReceive('initiateTransfer')->once()->andReturns(
            (object)[
                'contents' => json_decode(''),
                'statusCode' => 404,
            ]
        );

        $event = new ArchivematicaIngestingEvent($this->bag);
        $listener = new InitiateTransferToArchivematicaListener($amClient);

        //test
        $listener->handle($event);

        // assets
        Event::assertNotDispatched(ArchivematicaInitiateTransferError::class);
        Event::assertDispatched(ConnectionError::class);
        Event::assertDispatched(ErrorEvent::class);
        Event::assertNotDispatched(ApproveTransferToArchivematicaEvent::class);
    }
}
