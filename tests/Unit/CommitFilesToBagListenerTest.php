<?php

namespace Tests\Unit;

use App\Bag;
use App\Events\ApproveTransferToArchivematicaEvent;
use App\Events\BagCompleteEvent;
use App\Events\BagFilesEvent;
use App\Events\ErrorEvent;
use App\Events\InitiateTransferToArchivematicaEvent;
use App\File;
use App\Listeners\ArchivematicaClient;
use App\Listeners\CommitFilesToBagListener;
use App\Listeners\InitiateTransferToArchivematicaListener;
use App\Listeners\SendBagToArchivematicaListener;
use BagitUtil;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Storage;
use Mockery;
use Tests\TestCase;
use Webpatser\Uuid\Uuid;

class CommitFilesToBagListenerTest extends TestCase
{
    protected $bag;
    protected $storage;
    protected $dstFile;
    protected $srcFile;
    protected $fileCount;
    protected $zipBagId;
    protected $files;

    protected function setupTest($fileCount): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->storage = Storage::fake();
        $this->dstFile = 'dst/test.zip';
        $this->fileCount = $fileCount;
        $this->zipBagId = '007';
        $this->files = [];
        for($count = $this->fileCount; $count > 0; $count--) {
            $fileName =  Uuid::generate();
            $this->storage->put("src/".$fileName, $fileName." : ".Uuid::generate());
            $file = Mockery::mock(File::class);
            $file
                ->shouldReceive('getAttribute')
                ->once()
                ->with('filename')
                ->andReturn($fileName);
            $file->shouldReceive('storagePathCompleted')
                ->once()
                ->andReturn("src/".$fileName);
            $this->files[] = $file;
        }

        $this->bag = Mockery::mock(Bag::class);
        $this->bag->shouldReceive('applyTransition')->once();
        $this->bag->shouldReceive('save')->once();
        $this->bag->shouldReceive('refresh')->once()->andReturnSelf();
        $this->bag
            ->shouldReceive('getAttribute')
            ->once()
            ->with('files')
            ->andReturn($this->files );
        $this->bag
            ->shouldReceive('getAttribute')
            ->once()
            ->with('files')
            ->andReturnSelf();
        $this->bag
            ->shouldReceive('count')
            ->once()
            ->andReturn(count($this->files));
    }

    public function test_add_files() {
        // setup
        $this->setupTest(5);
        Event::fake();
        $bagitUtil = Mockery::mock(BagitUtil::class);
        $bagitUtil->shouldReceive('addFile')->times(count($this->files));
        $bagitUtil
            ->shouldReceive('createBag')
            ->once()
            ->andReturn(true);
        $this->bag->shouldReceive('storagePathCreated')->once()->andReturn($this->storage->path($this->srcFile));
        $this->bag->shouldReceive('getAttribute')->once()->with('id')->andReturn($this->zipBagId);

        $event = new BagFilesEvent($this->bag);
        $listener = new CommitFilesToBagListener($bagitUtil);

        //test
        $listener->handle($event);

        // assets
        Event::assertDispatched(BagCompleteEvent::class);
        Event::assertNotDispatched(ErrorEvent::class);
    }

    public function test_no_files() {
        // setup
        $this->setupTest(0);
        Event::fake();

        $bagitUtil = Mockery::mock(BagitUtil::class);
        $bagitUtil->shouldReceive('addFile')->times(count($this->files));
        $bagitUtil->shouldReceive('createBag')->times(0);
        $this->bag->shouldReceive('storagePathCreated')->times(0);
        $this->bag->shouldReceive('getAttribute')->once()->with('id')->andReturn($this->zipBagId);

        $event = new BagFilesEvent($this->bag);
        $listener = new CommitFilesToBagListener($bagitUtil);

        //test
        $listener->handle($event);

        // assets
        Event::assertNotDispatched(BagCompleteEvent::class);
        Event::assertDispatched(ErrorEvent::class);
    }

    public function test_bag_creation_failure() {
        $this->setupTest(5);
        Event::fake();
        $bagitUtil = Mockery::mock(BagitUtil::class);
        $bagitUtil->shouldReceive('addFile')->times(count($this->files));
        $bagitUtil
            ->shouldReceive('createBag')
            ->once()
            ->andReturn(false);
        $this->bag->shouldReceive('storagePathCreated')->once()->andReturn($this->storage->path($this->srcFile));
        $this->bag->shouldReceive('getAttribute')->once()->with('id')->andReturn($this->zipBagId);

        $event = new BagFilesEvent($this->bag);
        $listener = new CommitFilesToBagListener($bagitUtil);

        //test
        $listener->handle($event);

        // assets
        Event::assertNotDispatched(BagCompleteEvent::class);
        Event::assertDispatched(ErrorEvent::class);
    }

}
