<?php

namespace Tests\Unit;

use App\Bag;
use App\Events\ClearIngestStatusEvent;
use App\Events\ClearTransferStatusEvent;
use App\Listeners\ArchivematicaClient;
use App\Listeners\ClearIngestStatus;
use App\Listeners\ClearTransferStatus;
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestEnvironment;

class ClearStatusTest extends TestCase
{
    use RefreshDatabase;
    use TestEnvironment;

    protected $bag;
    protected $SIPName;
    protected $UUID;
    protected $amClient;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->checkDefaultEnvironment();
        $this->bag = factory(Bag::class)->create();
        $this->SIPName = stristr($this->bag->zipBagFileName(), ".zip", true);
        $this->UUID = "0007";
        $this->amClient = \Mockery::mock(ArchivematicaClient::class);
    }

    protected function getAmClientResponse()
    {
        return json_decode('{
            "message":"OK", 
            "results":[
                {
                    "status": "COMPLETE",
                    "uuid" : "'.$this->UUID.'",
                    "name" : "'.$this->SIPName.'"
                }
            ]
        }');
    }

    /**
     * @test
     */
    public function clear_tansfer_status() {
        // setup
        $this->amClient->shouldReceive('getTransferStatus')
            ->once()->andReturn($this->getAmClientResponse());
        $this->amClient->shouldReceive('hideTransferStatus')
            ->once()->with($this->UUID);
        $event = new ClearTransferStatusEvent($this->bag);
        $listener = new ClearTransferStatus($this->amClient);

        //test
        $listener->handle($event);
    }

    /**
     * @test
     */
    public function clear_ingest_status() {
        // setup

        $this->amClient->shouldReceive('getIngestStatus')
            ->once()->andReturn($this->getAmClientResponse());
        $this->amClient->shouldReceive('hideIngestStatus')
            ->once()->with($this->UUID);
        $event = new ClearIngestStatusEvent($this->bag);
        $listener = new ClearIngestStatus($this->amClient);

        //test
        $listener->handle($event);
    }

}
