<?php

namespace Tests\Unit;

use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;
use App\Events\ClearTmpFilesEvent;
use App\Listeners\ClearTmpFiles;
use App\Bag;
use App\File;
use Laravel\Passport\Passport;

class ClearTmpFilesTest extends TestCase
{
    use DatabaseTransactions;

    private $bag;
    private $files;
    private $storageBags;
    private $storageUploader;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = factory(\App\User::class)->create();
        Passport::actingAs( $user );

        $this->storageBags = Storage::fake('bags');
        $this->storageUploader = Storage::fake('uploader');

        $bag = factory(Bag::class)->create();

        $this->files = factory(File::class, 5)->create()->each(function($file) use ($bag) {
            $file->bag_id = $bag->id;
            $file->save();
        });

        $this->bag = $bag->fresh();


        foreach($this->files as $file) {
            $this->storageUploader->put($file->storagePath(), $file->storagePath());
        }

    }

    /**
     * @test
     */
    public function test_delete_tmp_files_after_creating_a_zipped_bag() {
        // setup
        $this->storageBags->put($this->bag->zipBagFileName(), $this->bag->zipBagFileName());

        $event = new ClearTmpFilesEvent($this->bag);
        $listener = new ClearTmpFiles($this->storageBags);

        //test
        $listener->handle($event);

        //asserts
        $this->assertFileNotExists($this->storageBags->path($this->bag->zipBagFileName()));
        foreach($this->files as $file) {
            $this->assertFileNotExists($this->storageUploader->path($file->storagePath()));
        }
    }

    public function test_delete_tmp_files_after_creating_a_directory_with_files() {
        // setup
        $this->storageBags->put($this->bag->zipBagFileName()."/test.txt", $this->bag->zipBagFileName());

        $event = new ClearTmpFilesEvent($this->bag);
        $listener = new ClearTmpFiles($this->storageBags);

        //test
        $listener->handle($event);

        //asserts
        $this->assertFileNotExists($this->storageBags->path($this->bag->zipBagFileName()));
        foreach($this->files as $file) {
            $this->assertFileNotExists($this->storageUploader->path($file->storagePath()));
        }
    }

}
