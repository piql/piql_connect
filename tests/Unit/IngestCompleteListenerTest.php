<?php

namespace Tests\Unit;

use App\Bag;
use App\Events\ClearIngestStatusEvent;
use App\Events\ClearTmpFilesEvent;
use App\Events\ClearTransferStatusEvent;
use App\Events\IngestCompleteEvent;
use App\Job;
use App\Listeners\IngestCompleteListener;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Event;
use Tests\TestCase;
use Tests\TestEnvironment;
use database\factories\UserFactory;

class IngestCompleteListenerTest extends TestCase
{
    use RefreshDatabase;
    use TestEnvironment;

    private $bag;
    private $job;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->validDefaultEnvironment();

        $user = factory(User::class)->create();
        $this->bag = factory(Bag::class)->create([
            "owner" => $user->id,
            "status" => "ingesting"
        ]);
        $this->job = factory(Job::class)->create([
            "owner" => $user->id,
        ]);
    }

    /**
     * @test
     */
    public function success() {

        // setup
        Event::fake();

        $event = new IngestCompleteEvent($this->bag);
        $listener = new IngestCompleteListener();

        //test
        $listener->handle($event);

        // assets
        Event::assertDispatched(ClearTransferStatusEvent::class);
        Event::assertDispatched(ClearIngestStatusEvent::class);
        Event::assertDispatched(ClearTmpFilesEvent::class);

        $bag = $this->bag->fresh();
        $job = $this->job->fresh();

        $this->assertTrue($bag->status == "complete",
            'Expected bag status complete but found ' . $bag->state);
        $this->assertTrue($job->bags->first()->id == $bag->id,
            'Expected bag id '.$job->bags->first()->id.' but found '.$bag->id);

    }
}
