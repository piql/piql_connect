<?php

namespace Tests\Unit;

use App\Bag;
use App\Events\BagCompleteEvent;
use App\Events\ErrorEvent;
use App\Events\InitiateTransferToArchivematicaEvent;
use App\Listeners\SendBagToArchivematicaListener;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Storage;
use Mockery;
use Tests\TestCase;
use Faker\Factory as Faker;

class SendBagToArchivematicaListenerTest extends TestCase
{
    private $storageSource;
    private $storageDestination;
    private $bag;
    private $bagFileName;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Event::fake();

        $this->storageSource = Storage::fake("srcDisk");
        $this->storageDestination = Storage::fake("dstDisk");
        $this->bag = Mockery::mock(Bag::class);
        $this->bag->shouldReceive('canTransition')->once()->andReturn( true );;
        $this->bag->shouldReceive('applyTransition')->once()->andReturnSelf();
        $this->bag->shouldReceive('save')->once();

        $faker = Faker::create();
        $this->bagFileName = $faker->slug(1)."-".$faker->uuid;
    }

    public function test_transfer_files_to_service_using_a_using_zipped_bag_as_transfer_object()
    {
        $bagFileName = $this->bagFileName.'.zip';
        $this->bag->shouldReceive('zipBagFileName')->times(3)->andReturn($bagFileName);
        $files[] = (object)["name" => $bagFileName, "content" => "Hello world"];

        foreach ($files as $file) {
            $this->storageSource->put($file->name, $file->content);
        }

        $event = new BagCompleteEvent($this->bag);
        $listener = new SendBagToArchivematicaListener($this->storageSource, $this->storageDestination);
        $listener->handle($event);

        Event::assertDispatched(InitiateTransferToArchivematicaEvent::class);
        Event::assertNotDispatched(ErrorEvent::class);

        foreach ($files as $file) {
            $this->assertTrue($this->storageSource->exists($file->name));
        }

    }

    public function test_transfer_files_to_service_using_a_directory_as_transfer_object()
    {
        $this->bag->shouldReceive('zipBagFileName')->times(4)->andReturn($this->bagFileName);
        $files[] = (object)["name" => $this->bagFileName.'/objects/account/archive/holding/test.txt', "content" => "Hello world"];
        $files[] = (object)["name" => $this->bagFileName.'/metadata/metadata.csv', "content" => "Hello world"];

        foreach ($files as $file) {
            $this->storageSource->put($file->name, $file->content);
        }

        $event = new BagCompleteEvent($this->bag);
        $listener = new SendBagToArchivematicaListener($this->storageSource, $this->storageDestination);
        $listener->handle($event);

        Event::assertDispatched(InitiateTransferToArchivematicaEvent::class);
        Event::assertNotDispatched(ErrorEvent::class);

        foreach ($files as $file) {
            $this->assertTrue($this->storageSource->exists($file->name));
        }
    }

    public function test_transfer_missing_files_to_service()
    {
        $this->bag->shouldReceive('zipBagFileName')->times(3)->andReturn($this->bagFileName);
        $files[] = (object)["name" => $this->bagFileName.'/objects/account/archive/holding/test.txt', "content" => "Hello world"];
        $files[] = (object)["name" => $this->bagFileName.'/metadata/metadata.csv', "content" => "Hello world"];

        $event = new BagCompleteEvent($this->bag);
        $listener = new SendBagToArchivematicaListener($this->storageSource, $this->storageDestination);
        $listener->handle($event);

        Event::assertNotDispatched(InitiateTransferToArchivematicaEvent::class);
        Event::assertDispatched(ErrorEvent::class);

        foreach ($files as $file) {
            $this->assertTrue(!$this->storageSource->exists($file->name));
        }
    }
}
